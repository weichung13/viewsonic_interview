    ~/project  pytest                                                                                                                 1 ✘  23s   base  
====================================================================== test session starts ======================================================================
platform darwin -- Python 3.9.7, pytest-7.4.0, pluggy-1.3.0
rootdir: /Users/wechungjao/project
collected 2 items                                                                                                                                               

test_viewsonic.py .F                                                                                                                                      [100%]

=========================================================================== FAILURES ============================================================================
__________________________________________________________________ test_existing_account_login __________________________________________________________________

driver = <selenium.webdriver.edge.webdriver.WebDriver (session="5e0067611b36026d1d3a749758d631b0")>

    def test_existing_account_login(driver):
        try:
            driver.get("https://auth.myviewboard.com/oidc/v1/auth/identifier?response_type=code&client_id=mvb-core-service&state=dnJ-djRsdEJVc2R-M2ZOMldQc0RRNWtCbjFoc1phUWw0RktQaFcucTIzQmtQ&redirect_uri=https%3A%2F%2Fmyviewboard.com%2Fhome&scope=openid%20profile%20email&code_challenge=eo6Pj8bi64PC1YPXXtF0ElF-_bALdkaMV7VZwc5Sh5U&code_challenge_method=S256&nonce=dnJ-djRsdEJVc2R-M2ZOMldQc0RRNWtCbjFoc1phUWw0RktQaFcucTIzQmtQ")
    
    
            email_input = driver.find_element(By.XPATH,"//*[@id='c_main']/input[1]")
            login_button1 = driver.find_element(By.XPATH,"//*[@id='c_main']/button[1]")
    
            email_input.send_keys("wei8801013@yahoo.com.tw")
            login_button1.click()
    
            password_input = driver.find_element(By.XPATH,"//*[@id='c_main']/input[2]")
            login_button2 = driver.find_element(By.XPATH,"//*[@id='c_main']/button[3]")
    
>           password_input.send_keys("Qwert135!")

test_viewsonic.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/opt/homebrew/Caskroom/miniforge/base/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys
    self._execute(
/opt/homebrew/Caskroom/miniforge/base/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute
    return self._parent.execute(command, params)
/opt/homebrew/Caskroom/miniforge/base/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1032d34f0>
response = {'status': 400, 'value': '{"value":{"error":"element not interactable","message":"element not interactable\\n  (Sessio...000184cf7fa8 _pthread_start + 148\\n19  libsystem_pthread.dylib             0x0000000184cf2da0 thread_start + 8\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable
E         (Session info: MicrosoftEdge=116.0.1938.62)
E       Stacktrace:
E       0   msedgedriver                        0x0000000101041684 msedgedriver + 4740740
E       1   msedgedriver                        0x0000000101039760 msedgedriver + 4708192
E       2   msedgedriver                        0x0000000100c05a60 msedgedriver + 301664
E       3   msedgedriver                        0x0000000100c42354 msedgedriver + 549716
E       4   msedgedriver                        0x0000000100c40e28 msedgedriver + 544296
E       5   msedgedriver                        0x0000000100c3d618 msedgedriver + 529944
E       6   msedgedriver                        0x0000000100c81c8c msedgedriver + 810124
E       7   msedgedriver                        0x0000000100c3bda4 msedgedriver + 523684
E       8   msedgedriver                        0x0000000100c3cddc msedgedriver + 527836
E       9   msedgedriver                        0x0000000100ffdf70 msedgedriver + 4464496
E       10  msedgedriver                        0x0000000101002084 msedgedriver + 4481156
E       11  msedgedriver                        0x00000001010024d0 msedgedriver + 4482256
E       12  msedgedriver                        0x0000000100fc2b18 msedgedriver + 4221720
E       13  msedgedriver                        0x0000000101002b1c msedgedriver + 4483868
E       14  msedgedriver                        0x0000000100fdaf30 msedgedriver + 4321072
E       15  msedgedriver                        0x000000010102148c msedgedriver + 4609164
E       16  msedgedriver                        0x0000000101021650 msedgedriver + 4609616
E       17  msedgedriver                        0x0000000101032248 msedgedriver + 4678216
E       18  libsystem_pthread.dylib             0x0000000184cf7fa8 _pthread_start + 148
E       19  libsystem_pthread.dylib             0x0000000184cf2da0 thread_start + 8

/opt/homebrew/Caskroom/miniforge/base/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException
==================================================================== short test summary info ====================================================================
FAILED test_viewsonic.py::test_existing_account_login - selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable
================================================================= 1 failed, 1 passed in 20.16s ==================================================================
